The project is being developed for the newly created company, X as it's hotel reservation channel with users and has no predecessor. As there is no 'current system' working, it'd be wise to instead look at our available architecture options and explain how we have decided on our architecture.

The project has a couple of options available as it's architecture. A Model-view-controller approach could have been taken but as the project will be a website, it has been discarded as it's a more suited architecture for GUI applications and web applications. A client/server would be a fitting choice; where users use client websites through their choice of web browser to connect to the server. But future prospects of updates and function additions onto the system's capabilities make a different but similar architecture more attractive.

An n-tiered architecture would make the best choice for our hotel reservation system project; with an interface layer where users can interact the system through their web browsers, a logic layer where all the processing and communication is done and a storage layer where all the records for all the users,hotels and reservations are kept. The seperation of logic and storage layers allow for more flexibility in making improvements to each and also provides reliablity for the system. 
